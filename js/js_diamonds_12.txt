#Numbers

	All numbers in JavaScript are stored in 64-bit format IEEE-754,
	also known as “double precision”.

	let billion = 1e9;  // 1 billion, literally: 1 and 9 zeroes
	alert( 7.3e9 );  // 7.3 billions (7,300,000,000)

	### In other words, "e" multiplies the number by 1 with the given zeroes count ###
	
	!!!) let ms = 1e-6; // six zeroes to the left from 1
	     // -3 divides by 1 with 3 zeroes
		1e-3 = 1 / 1000 (=0.001)

	    // -6 divides by 1 with 6 zeroes
		1.23e-6 = 1.23 / 1000000 (=0.00000123)

	##  toString(base)
		The method num.toString(base) returns a string
		representation of num in the numeral system with the given base.

		base=16 is used for hex colors, character encodings etc, digits can be 0..9 or A..F.
		base=2 is mostly for debugging bitwise operations, digits can be 0 or 1.
		base=36 is the maximum, digits can be 0..9 or A..Z. The whole latin alphabet is used to represent a number. 
		A funny, but useful case for 36 is when we need to turn a long numeric identifier into something shorter, 
		for example to make a short url. Can simply represent it in the numeral system with base 36:

		alert( 123456..toString(36) ); // 2n9c
		
	Math.floor: Rounds down: 3.1 becomes 3, and -1.1 becomes -2.
	Math.ceil :  Rounds up: 3.1 becomes 4, and -1.1 becomes -1.
	Math.round: Rounds to the nearest integer: 3.1 becomes 3, 3.6 becomes 4 and -1.1 becomes -1.
	

	# Imprecise calculations
		
	Internally, a number is represented in 64-bit format IEEE-754, 
        so there are exactly 64 bits to store a number: 
	52 of them are used to store the digits, 11 of them store the position of the decimal point 
	(they are zero for integer numbers), and 1 bit is for the sign.

        If a number is too big, it would overflow the 64-bit storage, potentially giving an infinity:

        alert( 1e500 ); // Infinity

	alert( 0.1 + 0.2 == 0.3 ); // false

	Ouch! There are more consequences than an incorrect comparison here.
	Imagine you’re making an e-shopping site and the visitor puts $0.10 and $0.20 goods into his chart. 
	The order total will be $0.30000000000000004. That would surprise anyone.

        But why does this happen?

        A number is stored in memory in its binary form, 
        a sequence of ones and zeroes. But fractions like 0.1, 0.2 that look simple in the decimal 
	numeric system are actually unending fractions in their binary form.

        In other words, what is 0.1? It is one divided by ten 1/10, one-tenth.
	In decimal numeral system such numbers are easily representable. 
	Compare it to one-third: 1/3. It becomes an endless fraction 0.33333(3).

	So, division by powers 10 is guaranteed to work well in the decimal system, 
	but division by 3 is not. For the same reason, in the binary numeral system, 
	the division by powers of 2 is guaranteed to work, but 1/10 becomes an endless binary fraction.

	There’s just no way to store exactly 0.1 or exactly 0.2 using the binary system,
	just like there is no way to store one-third as a decimal fraction.

	The numeric format IEEE-754 solves this by rounding to the nearest possible number. 
	These rounding rules normally don’t allow us to see that “tiny precision loss”,
	so the number shows up as 0.3. But beware, the loss still exists.




	## Not only JavaScript
	The same issue exists in many other programming languages.

	PHP, Java, C, Perl, Ruby give exactly the same result, because they are based on the same numeric format.

	

	Can we work around the problem? Sure, there’re a number of ways:

	1) We can round the result with the help of a method toFixed(n):

 	let sum = 0.1 + 0.2;
	alert( sum.toFixed(2) ); // 0.30
	Please note that toFixed always returns a string.
	It ensures that it has 2 digits after the decimal point.
	That’s actually convenient if we have an e-shopping and need to show $0.30.
	For other cases, we can use the unary plus to coerce it into a number:

 	let sum = 0.1 + 0.2;
	alert( +sum.toFixed(2) ); // 0.3

	2) We can temporarily turn numbers into integers for the maths and then revert it back. It works like this:

 	alert( (0.1 * 10 + 0.2 * 10) / 10 ); // 0.3
	This works because when we do 0.1 * 10 = 1 and 0.2 * 10 = 2 then both numbers become integers, and there’s no precision loss.

	If we were dealing with a shop, then the most radical solution would be to
	store all prices in cents and use no fractions at all. 
	But what if we apply a discount of 30%? In practice, totally evading fractions is rarely feasible,
	so the solutions above help avoid this pitfall.


	Try running this:

	// Hello! I'm a self-increasing number!
	alert( 9999999999999999 ); // shows 10000000000000000
	This suffers from the same issue: a loss of precision. 
	There are 64 bits for the number, 52 of them can be used to store digits, but that’s not enough.
	So the least significant digits disappear.

	JavaScript doesn’t trigger an error in such events. 
	It does its best to fit the number into the desired format,
	but unfortunately, this format is not big enough.
	
	Two zeroes
	Another funny consequence of the internal representation of numbers is the existence of two zeroes: 0 and -0.
	That’s because a sign is represented by a single bit, so every number can be positive or negative, including a zero.
	In most cases the distinction is unnoticeable, because operators are suited to treat them as the same.

	In all other cases, Object.is(a, b) is the same as a === b.
	
	
	## parseInt and parseFloat
	
	Numeric conversion using a plus + or Number() is strict. 
	If a value is not exactly a number, it fails:

	alert( +"100px" ); // NaN
	The sole exception is spaces at the beginning or at the end of the string, as they are ignored.

	But in real life we often have values in units, like "100px" or "12pt" in CSS. 
	Also in many countries the currency symbol goes after the amount,
	so we have "19€" and would like to extract a numeric value out of that.

	That’s what parseInt and parseFloat are for.

	They “read” a number from a string until they can. In case of an error, the gathered number is returned. 
	The function parseInt returns an integer, whilst parseFloat will return a floating-point number:

	alert( parseInt('100px') ); // 100
	alert( parseFloat('12.5em') ); // 12.5

	alert( parseInt('12.3') ); // 12, only the integer part is returned
	alert( parseFloat('12.3.4') ); // 12.3, the second point stops the reading
	
	There are situations when parseInt/parseFloat will return NaN. It happens when no digits could be read:

	alert( parseInt('a123') ); // NaN, the first symbol stops the process
	The second argument of parseInt(str, radix)
	The parseInt() function has an optional second parameter.
	It specifies the base of the numeral system, so parseInt can also parse strings of hex numbers, binary numbers and so on:

	alert( parseInt('0xff', 16) ); // 255
	alert( parseInt('ff', 16) ); // 255, without 0x also works

	alert( parseInt('2n9c', 36) ); // 123456