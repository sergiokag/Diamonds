# Array methods

	- arr.push(...items) – adds items to the end,
	- arr.pop() – extracts an item from the end,
	- arr.shift() – extracts an item from the beginning,
	- arr.unshift(...items) – adds items to the beginning.


	## How to delete an element from the array
	
		Using the splice method.
		Returns the array of the removed elements.

	## How to copy an array or a part of it
	
		Using the slice method. 
		arr.slice(start, end)

		It returns a new array where it copies all the items
		start index "start" to "end" (not including "end").

		Both start and end can be negative, in that case position
		from array end is assumed.

	## How to join two or more array or items
		
		Using the concat method.
		arr.concat(arg1, arg2, ...)

		Returns a new array containing items from arr,
		then arg1, arg2 etc

		if an array-like object has Symbol.isConcatSpreadable property,
		then its elements are added instead:

		example: 
			let arr = [1, 2];

			let arrayLike = {
			  0: "something",
			  1: "else",
			  [Symbol.isConcatSpreadable]: true,
			  length: 2
			};

			alert( arr.concat(arrayLike) ); // 1,2,something,else

	## Searching in array

		- arr.indexOf(item, from) looks for item starting from index from, 
			and returns the index where it was found, otherwise -1.

		- arr.lastIndexOf(item, from) – same, but looks from right to left.

		- arr.includes(item, from) – looks for item starting from index from,
			returns true if found.

		Note that the methods use === comparison. 
		So, if we look for false, it finds exactly false and not the zero.

		If we want to check for inclusion, 
		and don’t want to know the exact index, then arr.includes is preferred.

		Also, a very minor difference of includes is
		that it correctly handles NaN, unlike indexOf/lastIndexOf:

		const arr = [NaN];
		alert( arr.indexOf(NaN) ); // -1 (should be 0, but === equality doesn't work for NaN)
		alert( arr.includes(NaN) );// true (correct)

	
	## find and findIndex

	let result = arr.find(function(item, index, array) {
	  // should return true if the item is what we are looking for
	});

	The function is called repetitively for each element of the array:

	- item is the element.
	- index is its index.
	- array is the array itself.	

	If it returns true, the search is stopped,
	the item is returned. If nothing found, undefined is returned.

	## filter

	The find method looks for a single (first) element that makes the function return true.

	
	
	## Transform an array
		This section is about the methods transforming or reordering the array

	#map
	
	let result = arr.map(function(item, index, array) {
	  // returns the new value instead of item
	})

	# sort(fn)
		The items are sorted as strings by default.
		Literally, all elements are converted to strings and then compared. 
	

	To use our own sorting order, we need to supply 
	a function of two arguments as the argument of arr.sort().
	
	arr.sort(function(a, b) { return a - b; });
	
	#reverse
		arr.reverse();
		It also returns the array arr after the reversal.


	# split and join
		str.split ---> string of arrays
		arr.join ---> does the reverse to split
				   it creates a string of arr items
				   glued by str between them.
	
	# reduce/ reduceRight
		used to calculate a single value based on the array.

		The syntax is:
		
		let value = arr.reduce(function(previousValue, item, index, arr) {
		  // ...
		}, initial);		

		previousValue – is the result of the previous function call, initial for the first call.

		if there’s no initial, then reduce takes the first 
		element of the array as the initial value and starts 
		the iteration from the 2nd element.

		If the array is empty, then reduce call without initial value gives an error.

		let arr = [];

		// Error: Reduce of empty array with no initial value
		// if the initial value existed, reduce would return it for the empty arr.

		arr.reduce((sum, current) => sum + current);


		##############################

		The value of thisArg parameter becomes this for func.
		
